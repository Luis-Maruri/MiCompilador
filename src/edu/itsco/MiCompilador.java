/* MiCompilador.java */
/* Generated By:JavaCC: Do not edit this line. MiCompilador.java */
package edu.itsco;

import java.util.List;
import java.util.ArrayList;

public class MiCompilador implements MiCompiladorConstants {

  public static List<Variable> variables;

  public static void main(String args[])
    throws ParseException,SemanticException {
    variables = new ArrayList<Variable>();
    MiCompilador parser = new MiCompilador(System.in);
    System.out.println("Bienvenidos al Compilador");
    //parser.gramaticaImprimir();
    //parser.gramaticaDeclararVariable();
    parser.gramaticaPrincipal();
    System.out.println("Compilo correctamente");
  }

  public static void addVariable(Variable v) throws
    SemanticException{
    if(!variables.contains(v)){
        variables.add(v);
    }else{
        throw new SemanticException(v.getId(),
            SemanticException.VARIABLE_DUPLICADA);
    }
  }

  public static void variableExiste(Variable v) throws
    SemanticException{
     if(!variables.contains(v)){
        throw new SemanticException(v.getId(),
            SemanticException.VARIABLE_NO_DEFINIDA);
     }
  }

  static final public void gramaticaImprimir() throws ParseException, SemanticException {//Codigo Java
    Token id;
    jj_consume_token(IMPRIMIR);
    jj_consume_token(OPP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR_ENTERO:
    case VALOR_DECIMAL:
    case VALOR_CADENA:{
      valores();
      break;
      }
    case ID:{
      id = jj_consume_token(ID);
Variable v = new Variable();
                        v.setId(id.image);
                        variableExiste(v);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(MAS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VALOR_ENTERO:
      case VALOR_DECIMAL:
      case VALOR_CADENA:{
        valores();
        break;
        }
      case ID:{
        id = jj_consume_token(ID);
Variable v = new Variable();
                        v.setId(id.image);
                        variableExiste(v);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(CLP);
  }

  static final public void valores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR_CADENA:{
      jj_consume_token(VALOR_CADENA);
      break;
      }
    case VALOR_ENTERO:{
      jj_consume_token(VALOR_ENTERO);
      break;
      }
    case VALOR_DECIMAL:{
      jj_consume_token(VALOR_DECIMAL);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//En esta gramatica se lanzara la excepcion de 
//la variable ya existe.
  static final public void gramaticaDeclararVariable() throws ParseException, SemanticException {Token id;
    tipoDato();
    id = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      valores();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
Variable v = new Variable();
        v.setId(id.image);
        addVariable(v);
  }

  static final public void tipoDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTERO:{
      jj_consume_token(ENTERO);
      break;
      }
    case DECIMAL:{
      jj_consume_token(DECIMAL);
      break;
      }
    case CADENA:{
      jj_consume_token(CADENA);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaPrincipal() throws ParseException, SemanticException {
    jj_consume_token(INICIO);
    jj_consume_token(ID);
    sentencias();
    jj_consume_token(FIN);
  }

  static final public void sentencias() throws ParseException, SemanticException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRIMIR:{
        gramaticaImprimir();
        break;
        }
      case ENTERO:
      case DECIMAL:
      case CADENA:{
        gramaticaDeclararVariable();
        break;
        }
      case LEER:{
        gramaticaLeer();
        break;
        }
      case SI:{
        gramaticaIf();
        break;
        }
      case MIENTRAS:{
        gramaticaMientras();
        break;
        }
      case ID:{
        gramaticaAsignacion();
        break;
        }
      case PARA:{
        gramaticaFor();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTERO:
      case DECIMAL:
      case CADENA:
      case IMPRIMIR:
      case LEER:
      case SI:
      case PARA:
      case MIENTRAS:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
  }

  static final public void gramaticaLeer() throws ParseException, SemanticException {Token id;
    jj_consume_token(LEER);
    jj_consume_token(OPP);
    id = jj_consume_token(ID);
Variable v = new Variable();
              v.setId(id.image);
              variableExiste(v);
    jj_consume_token(CLP);
  }

  static final public void gramaticaIf() throws ParseException, SemanticException {
    jj_consume_token(SI);
    jj_consume_token(OPP);
    condicion();
    jj_consume_token(CLP);
    jj_consume_token(ENTONCES);
    sentencias();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINO:{
      jj_consume_token(SINO);
      sentencias();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SI);
  }

  static final public void condicion() throws ParseException {
    condicionSimple();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      opLogico();
      condicionSimple();
    }
  }

  static final public void opLogico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condicionSimple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR_ENTERO:
    case VALOR_DECIMAL:
    case VALOR_CADENA:{
      valores();
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    opRelacional();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR_ENTERO:
    case VALOR_DECIMAL:
    case VALOR_CADENA:{
      valores();
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void opRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAYOR:{
      jj_consume_token(MAYOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
      jj_consume_token(IGUAL);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaMientras() throws ParseException, SemanticException {
    jj_consume_token(MIENTRAS);
    jj_consume_token(OPP);
    condicion();
    jj_consume_token(CLP);
    sentencias();
    jj_consume_token(FIN);
    jj_consume_token(MIENTRAS);
  }

  static final public void gramaticaAsignacion() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    operacion();
  }

  static final public void operacion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR_ENTERO:
    case VALOR_DECIMAL:
    case VALOR_CADENA:{
      valores();
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    case OPP:{
      opParentesis();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:
      case ENTRE:
      case MULTI:
      case MOD:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      opAritmetico();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VALOR_ENTERO:
      case VALOR_DECIMAL:
      case VALOR_CADENA:{
        valores();
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      case OPP:{
        opParentesis();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void opParentesis() throws ParseException {
    jj_consume_token(OPP);
    operacion();
    jj_consume_token(CLP);
  }

  static final public void opAritmetico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:{
      jj_consume_token(MAS);
      break;
      }
    case MENOS:{
      jj_consume_token(MENOS);
      break;
      }
    case MULTI:{
      jj_consume_token(MULTI);
      break;
      }
    case ENTRE:{
      jj_consume_token(ENTRE);
      break;
      }
    case MOD:{
      jj_consume_token(MOD);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void gramaticaFor() throws ParseException, SemanticException {
    jj_consume_token(PARA);
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    jj_consume_token(VALOR_ENTERO);
    jj_consume_token(HASTA);
    jj_consume_token(VALOR_ENTERO);
    sentencias();
    jj_consume_token(SIGUIENTE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiCompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x200000,0x0,0x0,0x100000,0x380,0x49f80,0x49f80,0x4000,0x30000000,0x30000000,0x0,0x0,0x100000,0x100000,0xc100000,0x0,0x3e00000,0x0,0x3e00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1e0,0x0,0x1e0,0xe0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x1e0,0x1e0,0x0,0x0,0x0,0x1e2,0x0,0x1e2,0x0,};
   }

  /** Constructor with InputStream. */
  public MiCompilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiCompilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiCompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiCompilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiCompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiCompilador(MiCompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiCompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
